/*
* generated by Xtext
*/
package fr.obeo.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SPrototyperGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SPrototyperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPrototyper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cQualifierKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualifierAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cQualifierSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cQualifierAssignment_3_1.eContents().get(0);
		private final Assignment cViewpointsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cViewpointsSPViewpointParserRuleCall_4_0 = (RuleCall)cViewpointsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SPrototyper:
		//	"proto" name=ID "{" ("qualifier" qualifier=STRING)? viewpoints+=SPViewpoint* "}";
		public ParserRule getRule() { return rule; }

		//"proto" name=ID "{" ("qualifier" qualifier=STRING)? viewpoints+=SPViewpoint* "}"
		public Group getGroup() { return cGroup; }

		//"proto"
		public Keyword getProtoKeyword_0() { return cProtoKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("qualifier" qualifier=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"qualifier"
		public Keyword getQualifierKeyword_3_0() { return cQualifierKeyword_3_0; }

		//qualifier=STRING
		public Assignment getQualifierAssignment_3_1() { return cQualifierAssignment_3_1; }

		//STRING
		public RuleCall getQualifierSTRINGTerminalRuleCall_3_1_0() { return cQualifierSTRINGTerminalRuleCall_3_1_0; }

		//viewpoints+=SPViewpoint*
		public Assignment getViewpointsAssignment_4() { return cViewpointsAssignment_4; }

		//SPViewpoint
		public RuleCall getViewpointsSPViewpointParserRuleCall_4_0() { return cViewpointsSPViewpointParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SPViewpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPViewpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cShortcutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cShortcutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cShortcutSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cShortcutAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtensionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExtensionSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cExtensionAssignment_4_1.eContents().get(0);
		private final Assignment cRepresentationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRepresentationsSPRepresentationParserRuleCall_5_0 = (RuleCall)cRepresentationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SPViewpoint:
		//	"viewpoint" name=ID "{" ("shortcut" shortcut=STRING)? ("ext" extension=STRING)? representations+=SPRepresentation*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"viewpoint" name=ID "{" ("shortcut" shortcut=STRING)? ("ext" extension=STRING)? representations+=SPRepresentation* "}"
		public Group getGroup() { return cGroup; }

		//"viewpoint"
		public Keyword getViewpointKeyword_0() { return cViewpointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("shortcut" shortcut=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"shortcut"
		public Keyword getShortcutKeyword_3_0() { return cShortcutKeyword_3_0; }

		//shortcut=STRING
		public Assignment getShortcutAssignment_3_1() { return cShortcutAssignment_3_1; }

		//STRING
		public RuleCall getShortcutSTRINGTerminalRuleCall_3_1_0() { return cShortcutSTRINGTerminalRuleCall_3_1_0; }

		//("ext" extension=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"ext"
		public Keyword getExtKeyword_4_0() { return cExtKeyword_4_0; }

		//extension=STRING
		public Assignment getExtensionAssignment_4_1() { return cExtensionAssignment_4_1; }

		//STRING
		public RuleCall getExtensionSTRINGTerminalRuleCall_4_1_0() { return cExtensionSTRINGTerminalRuleCall_4_1_0; }

		//representations+=SPRepresentation*
		public Assignment getRepresentationsAssignment_5() { return cRepresentationsAssignment_5; }

		//SPRepresentation
		public RuleCall getRepresentationsSPRepresentationParserRuleCall_5_0() { return cRepresentationsSPRepresentationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class SPRepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPRepresentation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPTableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSPDiagramParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SPRepresentation:
		//	SPTable | SPDiagram;
		public ParserRule getRule() { return rule; }

		//SPTable | SPDiagram
		public Alternatives getAlternatives() { return cAlternatives; }

		//SPTable
		public RuleCall getSPTableParserRuleCall_0() { return cSPTableParserRuleCall_0; }

		//SPDiagram
		public RuleCall getSPDiagramParserRuleCall_1() { return cSPDiagramParserRuleCall_1; }
	}

	public class SPTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLabelKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLabelAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cLabelAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTitleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTitleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cTitleAssignment_4_1.eContents().get(0);
		private final Assignment cUsagesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUsagesMetamodelUsageParserRuleCall_5_0 = (RuleCall)cUsagesAssignment_5.eContents().get(0);
		private final Keyword cRootKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRootAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cRootEClassCrossReference_7_0 = (CrossReference)cRootAssignment_7.eContents().get(0);
		private final RuleCall cRootEClassIDTerminalRuleCall_7_0_1 = (RuleCall)cRootEClassCrossReference_7_0.eContents().get(1);
		private final Assignment cElementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElementsTableElementParserRuleCall_8_0 = (RuleCall)cElementsAssignment_8.eContents().get(0);
		private final Assignment cPropertiesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPropertiesTablePropertyParserRuleCall_9_0 = (RuleCall)cPropertiesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//SPTable:
		//	"table" name=ID "{" ("label" label=STRING)? ("title" title=STRING)? usages+=MetamodelUsage+ "root"
		//	root=[ecore::EClass] elements+=TableElement+ properties+=TableProperty+ "}";
		public ParserRule getRule() { return rule; }

		//"table" name=ID "{" ("label" label=STRING)? ("title" title=STRING)? usages+=MetamodelUsage+ "root" root=[ecore::EClass]
		//elements+=TableElement+ properties+=TableProperty+ "}"
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("label" label=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"label"
		public Keyword getLabelKeyword_3_0() { return cLabelKeyword_3_0; }

		//label=STRING
		public Assignment getLabelAssignment_3_1() { return cLabelAssignment_3_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_1_0() { return cLabelSTRINGTerminalRuleCall_3_1_0; }

		//("title" title=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"title"
		public Keyword getTitleKeyword_4_0() { return cTitleKeyword_4_0; }

		//title=STRING
		public Assignment getTitleAssignment_4_1() { return cTitleAssignment_4_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_4_1_0() { return cTitleSTRINGTerminalRuleCall_4_1_0; }

		//usages+=MetamodelUsage+
		public Assignment getUsagesAssignment_5() { return cUsagesAssignment_5; }

		//MetamodelUsage
		public RuleCall getUsagesMetamodelUsageParserRuleCall_5_0() { return cUsagesMetamodelUsageParserRuleCall_5_0; }

		//"root"
		public Keyword getRootKeyword_6() { return cRootKeyword_6; }

		//root=[ecore::EClass]
		public Assignment getRootAssignment_7() { return cRootAssignment_7; }

		//[ecore::EClass]
		public CrossReference getRootEClassCrossReference_7_0() { return cRootEClassCrossReference_7_0; }

		//ID
		public RuleCall getRootEClassIDTerminalRuleCall_7_0_1() { return cRootEClassIDTerminalRuleCall_7_0_1; }

		//elements+=TableElement+
		public Assignment getElementsAssignment_8() { return cElementsAssignment_8; }

		//TableElement
		public RuleCall getElementsTableElementParserRuleCall_8_0() { return cElementsTableElementParserRuleCall_8_0; }

		//properties+=TableProperty+
		public Assignment getPropertiesAssignment_9() { return cPropertiesAssignment_9; }

		//TableProperty
		public RuleCall getPropertiesTablePropertyParserRuleCall_9_0() { return cPropertiesTablePropertyParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class TableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCreatableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCreatableCreatableKeyword_0_0 = (Keyword)cCreatableAssignment_0.eContents().get(0);
		private final Assignment cRecursiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRecursiveRecursiveKeyword_1_0 = (Keyword)cRecursiveAssignment_1.eContents().get(0);
		private final Keyword cElementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEClassEClassCrossReference_3_0 = (CrossReference)cEClassAssignment_3.eContents().get(0);
		private final RuleCall cEClassEClassIDTerminalRuleCall_3_0_1 = (RuleCall)cEClassEClassCrossReference_3_0.eContents().get(1);
		private final Keyword cAccessibleThroughKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionSPExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSubElementsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSubElementsTableElementParserRuleCall_6_1_0 = (RuleCall)cSubElementsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//TableElement:
		//	creatable?="creatable"? recursive?="recursive"? "element" eClass=[ecore::EClass] "accessibleThrough"
		//	expression=SPExpression ("{" subElements+=TableElement+ "}")?;
		public ParserRule getRule() { return rule; }

		//creatable?="creatable"? recursive?="recursive"? "element" eClass=[ecore::EClass] "accessibleThrough"
		//expression=SPExpression ("{" subElements+=TableElement+ "}")?
		public Group getGroup() { return cGroup; }

		//creatable?="creatable"?
		public Assignment getCreatableAssignment_0() { return cCreatableAssignment_0; }

		//"creatable"
		public Keyword getCreatableCreatableKeyword_0_0() { return cCreatableCreatableKeyword_0_0; }

		//recursive?="recursive"?
		public Assignment getRecursiveAssignment_1() { return cRecursiveAssignment_1; }

		//"recursive"
		public Keyword getRecursiveRecursiveKeyword_1_0() { return cRecursiveRecursiveKeyword_1_0; }

		//"element"
		public Keyword getElementKeyword_2() { return cElementKeyword_2; }

		//eClass=[ecore::EClass]
		public Assignment getEClassAssignment_3() { return cEClassAssignment_3; }

		//[ecore::EClass]
		public CrossReference getEClassEClassCrossReference_3_0() { return cEClassEClassCrossReference_3_0; }

		//ID
		public RuleCall getEClassEClassIDTerminalRuleCall_3_0_1() { return cEClassEClassIDTerminalRuleCall_3_0_1; }

		//"accessibleThrough"
		public Keyword getAccessibleThroughKeyword_4() { return cAccessibleThroughKeyword_4; }

		//expression=SPExpression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//SPExpression
		public RuleCall getExpressionSPExpressionParserRuleCall_5_0() { return cExpressionSPExpressionParserRuleCall_5_0; }

		//("{" subElements+=TableElement+ "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }

		//subElements+=TableElement+
		public Assignment getSubElementsAssignment_6_1() { return cSubElementsAssignment_6_1; }

		//TableElement
		public RuleCall getSubElementsTableElementParserRuleCall_6_1_0() { return cSubElementsTableElementParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}

	public class TablePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureSTRINGTerminalRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExpressionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionSPExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//TableProperty:
		//	"property" feature=STRING ("label" label=STRING)? ("expression" expression=SPExpression)?;
		public ParserRule getRule() { return rule; }

		//"property" feature=STRING ("label" label=STRING)? ("expression" expression=SPExpression)?
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//feature=STRING
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//STRING
		public RuleCall getFeatureSTRINGTerminalRuleCall_1_0() { return cFeatureSTRINGTerminalRuleCall_1_0; }

		//("label" label=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"label"
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_0() { return cLabelSTRINGTerminalRuleCall_2_1_0; }

		//("expression" expression=SPExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"expression"
		public Keyword getExpressionKeyword_3_0() { return cExpressionKeyword_3_0; }

		//expression=SPExpression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//SPExpression
		public RuleCall getExpressionSPExpressionParserRuleCall_3_1_0() { return cExpressionSPExpressionParserRuleCall_3_1_0; }
	}

	public class SPDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLabelKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLabelAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cLabelAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTitleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTitleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cTitleAssignment_4_1.eContents().get(0);
		private final Assignment cMetamodelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetamodelsMetamodelUsageParserRuleCall_5_0 = (RuleCall)cMetamodelsAssignment_5.eContents().get(0);
		private final Keyword cRootKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRootAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRootSTRINGTerminalRuleCall_7_0 = (RuleCall)cRootAssignment_7.eContents().get(0);
		private final Assignment cElementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElementsDiagramElementParserRuleCall_8_0 = (RuleCall)cElementsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SPDiagram:
		//	"diagram" name=ID "{" ("label" label=STRING)? ("title" title=STRING)? metamodels+=MetamodelUsage+ "root" root=STRING
		//	elements+=DiagramElement+ "}";
		public ParserRule getRule() { return rule; }

		//"diagram" name=ID "{" ("label" label=STRING)? ("title" title=STRING)? metamodels+=MetamodelUsage+ "root" root=STRING
		//elements+=DiagramElement+ "}"
		public Group getGroup() { return cGroup; }

		//"diagram"
		public Keyword getDiagramKeyword_0() { return cDiagramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("label" label=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"label"
		public Keyword getLabelKeyword_3_0() { return cLabelKeyword_3_0; }

		//label=STRING
		public Assignment getLabelAssignment_3_1() { return cLabelAssignment_3_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_1_0() { return cLabelSTRINGTerminalRuleCall_3_1_0; }

		//("title" title=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"title"
		public Keyword getTitleKeyword_4_0() { return cTitleKeyword_4_0; }

		//title=STRING
		public Assignment getTitleAssignment_4_1() { return cTitleAssignment_4_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_4_1_0() { return cTitleSTRINGTerminalRuleCall_4_1_0; }

		//metamodels+=MetamodelUsage+
		public Assignment getMetamodelsAssignment_5() { return cMetamodelsAssignment_5; }

		//MetamodelUsage
		public RuleCall getMetamodelsMetamodelUsageParserRuleCall_5_0() { return cMetamodelsMetamodelUsageParserRuleCall_5_0; }

		//"root"
		public Keyword getRootKeyword_6() { return cRootKeyword_6; }

		//root=STRING
		public Assignment getRootAssignment_7() { return cRootAssignment_7; }

		//STRING
		public RuleCall getRootSTRINGTerminalRuleCall_7_0() { return cRootSTRINGTerminalRuleCall_7_0; }

		//elements+=DiagramElement+
		public Assignment getElementsAssignment_8() { return cElementsAssignment_8; }

		//DiagramElement
		public RuleCall getElementsDiagramElementParserRuleCall_8_0() { return cElementsDiagramElementParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class DiagramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiagramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DiagramElement:
		//	Container | Node;
		public ParserRule getRule() { return rule; }

		//Container | Node
		public Alternatives getAlternatives() { return cAlternatives; }

		//Container
		public RuleCall getContainerParserRuleCall_0() { return cContainerParserRuleCall_0; }

		//Node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
	}

	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCreatableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCreatableCreatableKeyword_0_0 = (Keyword)cCreatableAssignment_0.eContents().get(0);
		private final Assignment cRecursiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRecursiveRecursiveKeyword_1_0 = (Keyword)cRecursiveAssignment_1.eContents().get(0);
		private final Assignment cContainerTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContainerTypeContainerTypeParserRuleCall_2_0 = (RuleCall)cContainerTypeAssignment_2.eContents().get(0);
		private final Keyword cContainerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEClassAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEClassSTRINGTerminalRuleCall_6_0 = (RuleCall)cEClassAssignment_6.eContents().get(0);
		private final Keyword cAccessibleThroughKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionSPExpressionParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		private final Assignment cStyleAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStyleContainerStyleDefinitionParserRuleCall_9_0 = (RuleCall)cStyleAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cElementsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cElementsDiagramElementParserRuleCall_10_1_0 = (RuleCall)cElementsAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		
		//Container:
		//	creatable?="creatable"? recursive?="recursive"? containerType=ContainerType? "container" name=ID "for" eClass=STRING
		//	"accessibleThrough" expression=SPExpression style=ContainerStyleDefinition? ("{" elements+=DiagramElement+ "}")?;
		public ParserRule getRule() { return rule; }

		//creatable?="creatable"? recursive?="recursive"? containerType=ContainerType? "container" name=ID "for" eClass=STRING
		//"accessibleThrough" expression=SPExpression style=ContainerStyleDefinition? ("{" elements+=DiagramElement+ "}")?
		public Group getGroup() { return cGroup; }

		//creatable?="creatable"?
		public Assignment getCreatableAssignment_0() { return cCreatableAssignment_0; }

		//"creatable"
		public Keyword getCreatableCreatableKeyword_0_0() { return cCreatableCreatableKeyword_0_0; }

		//recursive?="recursive"?
		public Assignment getRecursiveAssignment_1() { return cRecursiveAssignment_1; }

		//"recursive"
		public Keyword getRecursiveRecursiveKeyword_1_0() { return cRecursiveRecursiveKeyword_1_0; }

		//containerType=ContainerType?
		public Assignment getContainerTypeAssignment_2() { return cContainerTypeAssignment_2; }

		//ContainerType
		public RuleCall getContainerTypeContainerTypeParserRuleCall_2_0() { return cContainerTypeContainerTypeParserRuleCall_2_0; }

		//"container"
		public Keyword getContainerKeyword_3() { return cContainerKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"for"
		public Keyword getForKeyword_5() { return cForKeyword_5; }

		//eClass=STRING
		public Assignment getEClassAssignment_6() { return cEClassAssignment_6; }

		//STRING
		public RuleCall getEClassSTRINGTerminalRuleCall_6_0() { return cEClassSTRINGTerminalRuleCall_6_0; }

		//"accessibleThrough"
		public Keyword getAccessibleThroughKeyword_7() { return cAccessibleThroughKeyword_7; }

		//expression=SPExpression
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }

		//SPExpression
		public RuleCall getExpressionSPExpressionParserRuleCall_8_0() { return cExpressionSPExpressionParserRuleCall_8_0; }

		//style=ContainerStyleDefinition?
		public Assignment getStyleAssignment_9() { return cStyleAssignment_9; }

		//ContainerStyleDefinition
		public RuleCall getStyleContainerStyleDefinitionParserRuleCall_9_0() { return cStyleContainerStyleDefinitionParserRuleCall_9_0; }

		//("{" elements+=DiagramElement+ "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_0() { return cLeftCurlyBracketKeyword_10_0; }

		//elements+=DiagramElement+
		public Assignment getElementsAssignment_10_1() { return cElementsAssignment_10_1; }

		//DiagramElement
		public RuleCall getElementsDiagramElementParserRuleCall_10_1_0() { return cElementsDiagramElementParserRuleCall_10_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_2() { return cRightCurlyBracketKeyword_10_2; }
	}

	public class ContainerStyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerStyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorContainerColorDefinitionParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelLabelStyleDefinitionParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBorderAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBorderBorderStyleDefinitionParserRuleCall_3_1_0 = (RuleCall)cBorderAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContainerStyleDefinition:
		//	"[" color=ContainerColorDefinition ("," label=LabelStyleDefinition)? ("," border=BorderStyleDefinition)? "]";
		public ParserRule getRule() { return rule; }

		//"[" color=ContainerColorDefinition ("," label=LabelStyleDefinition)? ("," border=BorderStyleDefinition)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//color=ContainerColorDefinition
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }

		//ContainerColorDefinition
		public RuleCall getColorContainerColorDefinitionParserRuleCall_1_0() { return cColorContainerColorDefinitionParserRuleCall_1_0; }

		//("," label=LabelStyleDefinition)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//label=LabelStyleDefinition
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//LabelStyleDefinition
		public RuleCall getLabelLabelStyleDefinitionParserRuleCall_2_1_0() { return cLabelLabelStyleDefinitionParserRuleCall_2_1_0; }

		//("," border=BorderStyleDefinition)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//border=BorderStyleDefinition
		public Assignment getBorderAssignment_3_1() { return cBorderAssignment_3_1; }

		//BorderStyleDefinition
		public RuleCall getBorderBorderStyleDefinitionParserRuleCall_3_1_0() { return cBorderBorderStyleDefinitionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ContainerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFreeformKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cListKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ContainerType:
		//	"freeform" | "list";
		public ParserRule getRule() { return rule; }

		//"freeform" | "list"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"freeform"
		public Keyword getFreeformKeyword_0() { return cFreeformKeyword_0; }

		//"list"
		public Keyword getListKeyword_1() { return cListKeyword_1; }
	}

	public class ContainerColorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainerColorDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSolidColorDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGradientColorDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ContainerColorDefinition:
		//	SolidColorDefinition | GradientColorDefinition;
		public ParserRule getRule() { return rule; }

		//SolidColorDefinition | GradientColorDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//SolidColorDefinition
		public RuleCall getSolidColorDefinitionParserRuleCall_0() { return cSolidColorDefinitionParserRuleCall_0; }

		//GradientColorDefinition
		public RuleCall getGradientColorDefinitionParserRuleCall_1() { return cGradientColorDefinitionParserRuleCall_1; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCreatableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCreatableCreatableKeyword_0_0 = (Keyword)cCreatableAssignment_0.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEClassSTRINGTerminalRuleCall_4_0 = (RuleCall)cEClassAssignment_4.eContents().get(0);
		private final Keyword cAccessibleThroughKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionSPExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final Assignment cStyleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStyleNodeStyleDefinitionParserRuleCall_7_0 = (RuleCall)cStyleAssignment_7.eContents().get(0);
		
		//Node:
		//	creatable?="creatable"? "node" name=ID "for" eClass=STRING "accessibleThrough" expression=SPExpression
		//	style=NodeStyleDefinition?;
		public ParserRule getRule() { return rule; }

		//creatable?="creatable"? "node" name=ID "for" eClass=STRING "accessibleThrough" expression=SPExpression
		//style=NodeStyleDefinition?
		public Group getGroup() { return cGroup; }

		//creatable?="creatable"?
		public Assignment getCreatableAssignment_0() { return cCreatableAssignment_0; }

		//"creatable"
		public Keyword getCreatableCreatableKeyword_0_0() { return cCreatableCreatableKeyword_0_0; }

		//"node"
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"for"
		public Keyword getForKeyword_3() { return cForKeyword_3; }

		//eClass=STRING
		public Assignment getEClassAssignment_4() { return cEClassAssignment_4; }

		//STRING
		public RuleCall getEClassSTRINGTerminalRuleCall_4_0() { return cEClassSTRINGTerminalRuleCall_4_0; }

		//"accessibleThrough"
		public Keyword getAccessibleThroughKeyword_5() { return cAccessibleThroughKeyword_5; }

		//expression=SPExpression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }

		//SPExpression
		public RuleCall getExpressionSPExpressionParserRuleCall_6_0() { return cExpressionSPExpressionParserRuleCall_6_0; }

		//style=NodeStyleDefinition?
		public Assignment getStyleAssignment_7() { return cStyleAssignment_7; }

		//NodeStyleDefinition
		public RuleCall getStyleNodeStyleDefinitionParserRuleCall_7_0() { return cStyleNodeStyleDefinitionParserRuleCall_7_0; }
	}

	public class NodeStyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeStyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorSolidColorDefinitionParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelLabelStyleDefinitionParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBorderAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBorderBorderStyleDefinitionParserRuleCall_3_1_0 = (RuleCall)cBorderAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NodeStyleDefinition:
		//	"[" color=SolidColorDefinition ("," label=LabelStyleDefinition)? ("," border=BorderStyleDefinition)? "]";
		public ParserRule getRule() { return rule; }

		//"[" color=SolidColorDefinition ("," label=LabelStyleDefinition)? ("," border=BorderStyleDefinition)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//color=SolidColorDefinition
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }

		//SolidColorDefinition
		public RuleCall getColorSolidColorDefinitionParserRuleCall_1_0() { return cColorSolidColorDefinitionParserRuleCall_1_0; }

		//("," label=LabelStyleDefinition)?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//label=LabelStyleDefinition
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }

		//LabelStyleDefinition
		public RuleCall getLabelLabelStyleDefinitionParserRuleCall_2_1_0() { return cLabelLabelStyleDefinitionParserRuleCall_2_1_0; }

		//("," border=BorderStyleDefinition)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//border=BorderStyleDefinition
		public Assignment getBorderAssignment_3_1() { return cBorderAssignment_3_1; }

		//BorderStyleDefinition
		public RuleCall getBorderBorderStyleDefinitionParserRuleCall_3_1_0() { return cBorderBorderStyleDefinitionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class SolidColorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SolidColorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorColorParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		
		//SolidColorDefinition:
		//	"color" color=Color;
		public ParserRule getRule() { return rule; }

		//"color" color=Color
		public Group getGroup() { return cGroup; }

		//"color"
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }

		//color=Color
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }

		//Color
		public RuleCall getColorColorParserRuleCall_1_0() { return cColorColorParserRuleCall_1_0; }
	}

	public class GradientColorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GradientColorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGradientFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromColorParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToColorParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		
		//GradientColorDefinition:
		//	"gradient from" from=Color "to" to=Color;
		public ParserRule getRule() { return rule; }

		//"gradient from" from=Color "to" to=Color
		public Group getGroup() { return cGroup; }

		//"gradient from"
		public Keyword getGradientFromKeyword_0() { return cGradientFromKeyword_0; }

		//from=Color
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }

		//Color
		public RuleCall getFromColorParserRuleCall_1_0() { return cFromColorParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//to=Color
		public Assignment getToAssignment_3() { return cToAssignment_3; }

		//Color
		public RuleCall getToColorParserRuleCall_3_0() { return cToColorParserRuleCall_3_0; }
	}

	public class LabelStyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelStyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSPExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorSolidColorDefinitionParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSizeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_3_1_0 = (RuleCall)cSizeAssignment_3_1.eContents().get(0);
		private final Assignment cBoldAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cBoldBoldKeyword_4_0 = (Keyword)cBoldAssignment_4.eContents().get(0);
		private final Assignment cItalicAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cItalicItalicKeyword_5_0 = (Keyword)cItalicAssignment_5.eContents().get(0);
		
		//LabelStyleDefinition:
		//	"label" expression=SPExpression? color=SolidColorDefinition ("size" size=INT)? bold?="bold"? italic?="italic"?;
		public ParserRule getRule() { return rule; }

		//"label" expression=SPExpression? color=SolidColorDefinition ("size" size=INT)? bold?="bold"? italic?="italic"?
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//expression=SPExpression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SPExpression
		public RuleCall getExpressionSPExpressionParserRuleCall_1_0() { return cExpressionSPExpressionParserRuleCall_1_0; }

		//color=SolidColorDefinition
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//SolidColorDefinition
		public RuleCall getColorSolidColorDefinitionParserRuleCall_2_0() { return cColorSolidColorDefinitionParserRuleCall_2_0; }

		//("size" size=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"size"
		public Keyword getSizeKeyword_3_0() { return cSizeKeyword_3_0; }

		//size=INT
		public Assignment getSizeAssignment_3_1() { return cSizeAssignment_3_1; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_1_0() { return cSizeINTTerminalRuleCall_3_1_0; }

		//bold?="bold"?
		public Assignment getBoldAssignment_4() { return cBoldAssignment_4; }

		//"bold"
		public Keyword getBoldBoldKeyword_4_0() { return cBoldBoldKeyword_4_0; }

		//italic?="italic"?
		public Assignment getItalicAssignment_5() { return cItalicAssignment_5; }

		//"italic"
		public Keyword getItalicItalicKeyword_5_0() { return cItalicItalicKeyword_5_0; }
	}

	public class BorderStyleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BorderStyleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBorderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorSolidColorDefinitionParserRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSizeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		
		//BorderStyleDefinition:
		//	"border " color=SolidColorDefinition ("size" size=INT)?;
		public ParserRule getRule() { return rule; }

		//"border " color=SolidColorDefinition ("size" size=INT)?
		public Group getGroup() { return cGroup; }

		//"border "
		public Keyword getBorderKeyword_0() { return cBorderKeyword_0; }

		//color=SolidColorDefinition
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }

		//SolidColorDefinition
		public RuleCall getColorSolidColorDefinitionParserRuleCall_1_0() { return cColorSolidColorDefinitionParserRuleCall_1_0; }

		//("size" size=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"size"
		public Keyword getSizeKeyword_2_0() { return cSizeKeyword_2_0; }

		//size=INT
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_1_0() { return cSizeINTTerminalRuleCall_2_1_0; }
	}

	public class SPExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SPExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAcceleoExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SPExpression:
		//	AcceleoExpression | VarRef | FeatureRef;
		public ParserRule getRule() { return rule; }

		//AcceleoExpression | VarRef | FeatureRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//AcceleoExpression
		public RuleCall getAcceleoExpressionParserRuleCall_0() { return cAcceleoExpressionParserRuleCall_0; }

		//VarRef
		public RuleCall getVarRefParserRuleCall_1() { return cVarRefParserRuleCall_1; }

		//FeatureRef
		public RuleCall getFeatureRefParserRuleCall_2() { return cFeatureRefParserRuleCall_2; }
	}

	public class AcceleoExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AcceleoExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//AcceleoExpression:
		//	"acc:" value=STRING;
		public ParserRule getRule() { return rule; }

		//"acc:" value=STRING
		public Group getGroup() { return cGroup; }

		//"acc:"
		public Keyword getAccKeyword_0() { return cAccKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//VarRef:
		//	"var:" value=STRING;
		public ParserRule getRule() { return rule; }

		//"var:" value=STRING
		public Group getGroup() { return cGroup; }

		//"var:"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class FeatureRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//FeatureRef:
		//	"feature:" value=ID;
		public ParserRule getRule() { return rule; }

		//"feature:" value=ID
		public Group getGroup() { return cGroup; }

		//"feature:"
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }

		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}

	public class MetamodelUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUsageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUsageEPackageCrossReference_1_0 = (CrossReference)cUsageAssignment_1.eContents().get(0);
		private final RuleCall cUsageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cUsageEPackageCrossReference_1_0.eContents().get(1);
		
		//MetamodelUsage:
		//	"metamodel" usage=[ecore::EPackage|STRING];
		public ParserRule getRule() { return rule; }

		//"metamodel" usage=[ecore::EPackage|STRING]
		public Group getGroup() { return cGroup; }

		//"metamodel"
		public Keyword getMetamodelKeyword_0() { return cMetamodelKeyword_0; }

		//usage=[ecore::EPackage|STRING]
		public Assignment getUsageAssignment_1() { return cUsageAssignment_1; }

		//[ecore::EPackage|STRING]
		public CrossReference getUsageEPackageCrossReference_1_0() { return cUsageEPackageCrossReference_1_0; }

		//STRING
		public RuleCall getUsageEPackageSTRINGTerminalRuleCall_1_0_1() { return cUsageEPackageSTRINGTerminalRuleCall_1_0_1; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final RuleCall cPreDefinedColorDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Color:
		//	PreDefinedColorDefinition;
		public ParserRule getRule() { return rule; }

		//PreDefinedColorDefinition
		public RuleCall getPreDefinedColorDefinitionParserRuleCall() { return cPreDefinedColorDefinitionParserRuleCall; }
	}

	public class PreDefinedColorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreDefinedColorDefinition");
		private final Assignment cColorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cColorPreDefinedColorEnumRuleCall_0 = (RuleCall)cColorAssignment.eContents().get(0);
		
		//PreDefinedColorDefinition:
		//	color=PreDefinedColor;
		public ParserRule getRule() { return rule; }

		//color=PreDefinedColor
		public Assignment getColorAssignment() { return cColorAssignment; }

		//PreDefinedColor
		public RuleCall getColorPreDefinedColorEnumRuleCall_0() { return cColorPreDefinedColorEnumRuleCall_0; }
	}
	
	
	public class PreDefinedColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PreDefinedColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWHITEWhiteKeyword_0_0 = (Keyword)cWHITEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLACKBlackKeyword_1_0 = (Keyword)cBLACKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBlueKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_BLUEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLIGHT_BLUELightBlueKeyword_3_0 = (Keyword)cLIGHT_BLUEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_BLUEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDARK_BLUEDarkBlueKeyword_4_0 = (Keyword)cDARK_BLUEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCHOCOLATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCHOCOLATEChocolateKeyword_5_0 = (Keyword)cCHOCOLATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_CHOCOLATEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLIGHT_CHOCOLATELightChocolateKeyword_6_0 = (Keyword)cLIGHT_CHOCOLATEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_CHOCOLATEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDARK_CHOCOLATEDarkChocolateKeyword_7_0 = (Keyword)cDARK_CHOCOLATEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cGRAYEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cGRAYGrayKeyword_8_0 = (Keyword)cGRAYEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_GRAYEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cLIGHT_GRAYLightGrayKeyword_9_0 = (Keyword)cLIGHT_GRAYEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_GRAYEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cDARK_GRAYDarkGrayKeyword_10_0 = (Keyword)cDARK_GRAYEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cGREENGreenKeyword_11_0 = (Keyword)cGREENEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_GREENEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cLIGHT_GREENLightGreenKeyword_12_0 = (Keyword)cLIGHT_GREENEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_GREENEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cDARK_GREENDarkGreenKeyword_13_0 = (Keyword)cDARK_GREENEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cORANGEEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cORANGEOrangeKeyword_14_0 = (Keyword)cORANGEEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_ORANGEEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cLIGHT_ORANGELightOrangeKeyword_15_0 = (Keyword)cLIGHT_ORANGEEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_ORANGEEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cDARK_ORANGEDarkOrangeKeyword_16_0 = (Keyword)cDARK_ORANGEEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cPURPLEEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cPURPLEPurpleKeyword_17_0 = (Keyword)cPURPLEEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_PURPLEEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cLIGHT_PURPLELightPurpleKeyword_18_0 = (Keyword)cLIGHT_PURPLEEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_PURPLEEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cDARK_PURPLEDarkPurpleKeyword_19_0 = (Keyword)cDARK_PURPLEEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cREDRedKeyword_20_0 = (Keyword)cREDEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_REDEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cLIGHT_REDLightRedKeyword_21_0 = (Keyword)cLIGHT_REDEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_REDEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cDARK_REDDarkRedKeyword_22_0 = (Keyword)cDARK_REDEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cYELLOWYellowKeyword_23_0 = (Keyword)cYELLOWEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cLIGHT_YELLOWEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cLIGHT_YELLOWLightYellowKeyword_24_0 = (Keyword)cLIGHT_YELLOWEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cDARK_YELLOWEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cDARK_YELLOWDarkYellowKeyword_25_0 = (Keyword)cDARK_YELLOWEnumLiteralDeclaration_25.eContents().get(0);
		
		//enum PreDefinedColor:
		//	WHITE="white" | BLACK="black" | BLUE="blue" | LIGHT_BLUE="light blue" | DARK_BLUE="dark blue" | CHOCOLATE="chocolate"
		//	| LIGHT_CHOCOLATE="light chocolate" | DARK_CHOCOLATE="dark chocolate" | GRAY="gray" | LIGHT_GRAY="light gray" |
		//	DARK_GRAY="dark gray" | GREEN="green" | LIGHT_GREEN="light green" | DARK_GREEN="dark green" | ORANGE="orange" |
		//	LIGHT_ORANGE="light orange" | DARK_ORANGE="dark orange" | PURPLE="purple" | LIGHT_PURPLE="light purple" |
		//	DARK_PURPLE="dark purple" | RED="red" | LIGHT_RED="light red" | DARK_RED="dark red" | YELLOW="yellow" |
		//	LIGHT_YELLOW="light yellow" | DARK_YELLOW="dark yellow";
		public EnumRule getRule() { return rule; }

		//WHITE="white" | BLACK="black" | BLUE="blue" | LIGHT_BLUE="light blue" | DARK_BLUE="dark blue" | CHOCOLATE="chocolate" |
		//LIGHT_CHOCOLATE="light chocolate" | DARK_CHOCOLATE="dark chocolate" | GRAY="gray" | LIGHT_GRAY="light gray" |
		//DARK_GRAY="dark gray" | GREEN="green" | LIGHT_GREEN="light green" | DARK_GREEN="dark green" | ORANGE="orange" |
		//LIGHT_ORANGE="light orange" | DARK_ORANGE="dark orange" | PURPLE="purple" | LIGHT_PURPLE="light purple" |
		//DARK_PURPLE="dark purple" | RED="red" | LIGHT_RED="light red" | DARK_RED="dark red" | YELLOW="yellow" |
		//LIGHT_YELLOW="light yellow" | DARK_YELLOW="dark yellow"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WHITE="white"
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_0() { return cWHITEEnumLiteralDeclaration_0; }

		//"white"
		public Keyword getWHITEWhiteKeyword_0_0() { return cWHITEWhiteKeyword_0_0; }

		//BLACK="black"
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_1() { return cBLACKEnumLiteralDeclaration_1; }

		//"black"
		public Keyword getBLACKBlackKeyword_1_0() { return cBLACKBlackKeyword_1_0; }

		//BLUE="blue"
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }

		//"blue"
		public Keyword getBLUEBlueKeyword_2_0() { return cBLUEBlueKeyword_2_0; }

		//LIGHT_BLUE="light blue"
		public EnumLiteralDeclaration getLIGHT_BLUEEnumLiteralDeclaration_3() { return cLIGHT_BLUEEnumLiteralDeclaration_3; }

		//"light blue"
		public Keyword getLIGHT_BLUELightBlueKeyword_3_0() { return cLIGHT_BLUELightBlueKeyword_3_0; }

		//DARK_BLUE="dark blue"
		public EnumLiteralDeclaration getDARK_BLUEEnumLiteralDeclaration_4() { return cDARK_BLUEEnumLiteralDeclaration_4; }

		//"dark blue"
		public Keyword getDARK_BLUEDarkBlueKeyword_4_0() { return cDARK_BLUEDarkBlueKeyword_4_0; }

		//CHOCOLATE="chocolate"
		public EnumLiteralDeclaration getCHOCOLATEEnumLiteralDeclaration_5() { return cCHOCOLATEEnumLiteralDeclaration_5; }

		//"chocolate"
		public Keyword getCHOCOLATEChocolateKeyword_5_0() { return cCHOCOLATEChocolateKeyword_5_0; }

		//LIGHT_CHOCOLATE="light chocolate"
		public EnumLiteralDeclaration getLIGHT_CHOCOLATEEnumLiteralDeclaration_6() { return cLIGHT_CHOCOLATEEnumLiteralDeclaration_6; }

		//"light chocolate"
		public Keyword getLIGHT_CHOCOLATELightChocolateKeyword_6_0() { return cLIGHT_CHOCOLATELightChocolateKeyword_6_0; }

		//DARK_CHOCOLATE="dark chocolate"
		public EnumLiteralDeclaration getDARK_CHOCOLATEEnumLiteralDeclaration_7() { return cDARK_CHOCOLATEEnumLiteralDeclaration_7; }

		//"dark chocolate"
		public Keyword getDARK_CHOCOLATEDarkChocolateKeyword_7_0() { return cDARK_CHOCOLATEDarkChocolateKeyword_7_0; }

		//GRAY="gray"
		public EnumLiteralDeclaration getGRAYEnumLiteralDeclaration_8() { return cGRAYEnumLiteralDeclaration_8; }

		//"gray"
		public Keyword getGRAYGrayKeyword_8_0() { return cGRAYGrayKeyword_8_0; }

		//LIGHT_GRAY="light gray"
		public EnumLiteralDeclaration getLIGHT_GRAYEnumLiteralDeclaration_9() { return cLIGHT_GRAYEnumLiteralDeclaration_9; }

		//"light gray"
		public Keyword getLIGHT_GRAYLightGrayKeyword_9_0() { return cLIGHT_GRAYLightGrayKeyword_9_0; }

		//DARK_GRAY="dark gray"
		public EnumLiteralDeclaration getDARK_GRAYEnumLiteralDeclaration_10() { return cDARK_GRAYEnumLiteralDeclaration_10; }

		//"dark gray"
		public Keyword getDARK_GRAYDarkGrayKeyword_10_0() { return cDARK_GRAYDarkGrayKeyword_10_0; }

		//GREEN="green"
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_11() { return cGREENEnumLiteralDeclaration_11; }

		//"green"
		public Keyword getGREENGreenKeyword_11_0() { return cGREENGreenKeyword_11_0; }

		//LIGHT_GREEN="light green"
		public EnumLiteralDeclaration getLIGHT_GREENEnumLiteralDeclaration_12() { return cLIGHT_GREENEnumLiteralDeclaration_12; }

		//"light green"
		public Keyword getLIGHT_GREENLightGreenKeyword_12_0() { return cLIGHT_GREENLightGreenKeyword_12_0; }

		//DARK_GREEN="dark green"
		public EnumLiteralDeclaration getDARK_GREENEnumLiteralDeclaration_13() { return cDARK_GREENEnumLiteralDeclaration_13; }

		//"dark green"
		public Keyword getDARK_GREENDarkGreenKeyword_13_0() { return cDARK_GREENDarkGreenKeyword_13_0; }

		//ORANGE="orange"
		public EnumLiteralDeclaration getORANGEEnumLiteralDeclaration_14() { return cORANGEEnumLiteralDeclaration_14; }

		//"orange"
		public Keyword getORANGEOrangeKeyword_14_0() { return cORANGEOrangeKeyword_14_0; }

		//LIGHT_ORANGE="light orange"
		public EnumLiteralDeclaration getLIGHT_ORANGEEnumLiteralDeclaration_15() { return cLIGHT_ORANGEEnumLiteralDeclaration_15; }

		//"light orange"
		public Keyword getLIGHT_ORANGELightOrangeKeyword_15_0() { return cLIGHT_ORANGELightOrangeKeyword_15_0; }

		//DARK_ORANGE="dark orange"
		public EnumLiteralDeclaration getDARK_ORANGEEnumLiteralDeclaration_16() { return cDARK_ORANGEEnumLiteralDeclaration_16; }

		//"dark orange"
		public Keyword getDARK_ORANGEDarkOrangeKeyword_16_0() { return cDARK_ORANGEDarkOrangeKeyword_16_0; }

		//PURPLE="purple"
		public EnumLiteralDeclaration getPURPLEEnumLiteralDeclaration_17() { return cPURPLEEnumLiteralDeclaration_17; }

		//"purple"
		public Keyword getPURPLEPurpleKeyword_17_0() { return cPURPLEPurpleKeyword_17_0; }

		//LIGHT_PURPLE="light purple"
		public EnumLiteralDeclaration getLIGHT_PURPLEEnumLiteralDeclaration_18() { return cLIGHT_PURPLEEnumLiteralDeclaration_18; }

		//"light purple"
		public Keyword getLIGHT_PURPLELightPurpleKeyword_18_0() { return cLIGHT_PURPLELightPurpleKeyword_18_0; }

		//DARK_PURPLE="dark purple"
		public EnumLiteralDeclaration getDARK_PURPLEEnumLiteralDeclaration_19() { return cDARK_PURPLEEnumLiteralDeclaration_19; }

		//"dark purple"
		public Keyword getDARK_PURPLEDarkPurpleKeyword_19_0() { return cDARK_PURPLEDarkPurpleKeyword_19_0; }

		//RED="red"
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_20() { return cREDEnumLiteralDeclaration_20; }

		//"red"
		public Keyword getREDRedKeyword_20_0() { return cREDRedKeyword_20_0; }

		//LIGHT_RED="light red"
		public EnumLiteralDeclaration getLIGHT_REDEnumLiteralDeclaration_21() { return cLIGHT_REDEnumLiteralDeclaration_21; }

		//"light red"
		public Keyword getLIGHT_REDLightRedKeyword_21_0() { return cLIGHT_REDLightRedKeyword_21_0; }

		//DARK_RED="dark red"
		public EnumLiteralDeclaration getDARK_REDEnumLiteralDeclaration_22() { return cDARK_REDEnumLiteralDeclaration_22; }

		//"dark red"
		public Keyword getDARK_REDDarkRedKeyword_22_0() { return cDARK_REDDarkRedKeyword_22_0; }

		//YELLOW="yellow"
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_23() { return cYELLOWEnumLiteralDeclaration_23; }

		//"yellow"
		public Keyword getYELLOWYellowKeyword_23_0() { return cYELLOWYellowKeyword_23_0; }

		//LIGHT_YELLOW="light yellow"
		public EnumLiteralDeclaration getLIGHT_YELLOWEnumLiteralDeclaration_24() { return cLIGHT_YELLOWEnumLiteralDeclaration_24; }

		//"light yellow"
		public Keyword getLIGHT_YELLOWLightYellowKeyword_24_0() { return cLIGHT_YELLOWLightYellowKeyword_24_0; }

		//DARK_YELLOW="dark yellow"
		public EnumLiteralDeclaration getDARK_YELLOWEnumLiteralDeclaration_25() { return cDARK_YELLOWEnumLiteralDeclaration_25; }

		//"dark yellow"
		public Keyword getDARK_YELLOWDarkYellowKeyword_25_0() { return cDARK_YELLOWDarkYellowKeyword_25_0; }
	}
	
	private final SPrototyperElements pSPrototyper;
	private final SPViewpointElements pSPViewpoint;
	private final SPRepresentationElements pSPRepresentation;
	private final SPTableElements pSPTable;
	private final TableElementElements pTableElement;
	private final TablePropertyElements pTableProperty;
	private final SPDiagramElements pSPDiagram;
	private final DiagramElementElements pDiagramElement;
	private final ContainerElements pContainer;
	private final ContainerStyleDefinitionElements pContainerStyleDefinition;
	private final ContainerTypeElements pContainerType;
	private final ContainerColorDefinitionElements pContainerColorDefinition;
	private final NodeElements pNode;
	private final NodeStyleDefinitionElements pNodeStyleDefinition;
	private final SolidColorDefinitionElements pSolidColorDefinition;
	private final GradientColorDefinitionElements pGradientColorDefinition;
	private final LabelStyleDefinitionElements pLabelStyleDefinition;
	private final BorderStyleDefinitionElements pBorderStyleDefinition;
	private final SPExpressionElements pSPExpression;
	private final AcceleoExpressionElements pAcceleoExpression;
	private final VarRefElements pVarRef;
	private final FeatureRefElements pFeatureRef;
	private final MetamodelUsageElements pMetamodelUsage;
	private final ColorElements pColor;
	private final PreDefinedColorDefinitionElements pPreDefinedColorDefinition;
	private final PreDefinedColorElements unknownRulePreDefinedColor;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SPrototyperGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSPrototyper = new SPrototyperElements();
		this.pSPViewpoint = new SPViewpointElements();
		this.pSPRepresentation = new SPRepresentationElements();
		this.pSPTable = new SPTableElements();
		this.pTableElement = new TableElementElements();
		this.pTableProperty = new TablePropertyElements();
		this.pSPDiagram = new SPDiagramElements();
		this.pDiagramElement = new DiagramElementElements();
		this.pContainer = new ContainerElements();
		this.pContainerStyleDefinition = new ContainerStyleDefinitionElements();
		this.pContainerType = new ContainerTypeElements();
		this.pContainerColorDefinition = new ContainerColorDefinitionElements();
		this.pNode = new NodeElements();
		this.pNodeStyleDefinition = new NodeStyleDefinitionElements();
		this.pSolidColorDefinition = new SolidColorDefinitionElements();
		this.pGradientColorDefinition = new GradientColorDefinitionElements();
		this.pLabelStyleDefinition = new LabelStyleDefinitionElements();
		this.pBorderStyleDefinition = new BorderStyleDefinitionElements();
		this.pSPExpression = new SPExpressionElements();
		this.pAcceleoExpression = new AcceleoExpressionElements();
		this.pVarRef = new VarRefElements();
		this.pFeatureRef = new FeatureRefElements();
		this.pMetamodelUsage = new MetamodelUsageElements();
		this.pColor = new ColorElements();
		this.pPreDefinedColorDefinition = new PreDefinedColorDefinitionElements();
		this.unknownRulePreDefinedColor = new PreDefinedColorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.obeo.dsl.SPrototyper".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SPrototyper:
	//	"proto" name=ID "{" ("qualifier" qualifier=STRING)? viewpoints+=SPViewpoint* "}";
	public SPrototyperElements getSPrototyperAccess() {
		return pSPrototyper;
	}
	
	public ParserRule getSPrototyperRule() {
		return getSPrototyperAccess().getRule();
	}

	//SPViewpoint:
	//	"viewpoint" name=ID "{" ("shortcut" shortcut=STRING)? ("ext" extension=STRING)? representations+=SPRepresentation*
	//	"}";
	public SPViewpointElements getSPViewpointAccess() {
		return pSPViewpoint;
	}
	
	public ParserRule getSPViewpointRule() {
		return getSPViewpointAccess().getRule();
	}

	//SPRepresentation:
	//	SPTable | SPDiagram;
	public SPRepresentationElements getSPRepresentationAccess() {
		return pSPRepresentation;
	}
	
	public ParserRule getSPRepresentationRule() {
		return getSPRepresentationAccess().getRule();
	}

	//SPTable:
	//	"table" name=ID "{" ("label" label=STRING)? ("title" title=STRING)? usages+=MetamodelUsage+ "root"
	//	root=[ecore::EClass] elements+=TableElement+ properties+=TableProperty+ "}";
	public SPTableElements getSPTableAccess() {
		return pSPTable;
	}
	
	public ParserRule getSPTableRule() {
		return getSPTableAccess().getRule();
	}

	//TableElement:
	//	creatable?="creatable"? recursive?="recursive"? "element" eClass=[ecore::EClass] "accessibleThrough"
	//	expression=SPExpression ("{" subElements+=TableElement+ "}")?;
	public TableElementElements getTableElementAccess() {
		return pTableElement;
	}
	
	public ParserRule getTableElementRule() {
		return getTableElementAccess().getRule();
	}

	//TableProperty:
	//	"property" feature=STRING ("label" label=STRING)? ("expression" expression=SPExpression)?;
	public TablePropertyElements getTablePropertyAccess() {
		return pTableProperty;
	}
	
	public ParserRule getTablePropertyRule() {
		return getTablePropertyAccess().getRule();
	}

	//SPDiagram:
	//	"diagram" name=ID "{" ("label" label=STRING)? ("title" title=STRING)? metamodels+=MetamodelUsage+ "root" root=STRING
	//	elements+=DiagramElement+ "}";
	public SPDiagramElements getSPDiagramAccess() {
		return pSPDiagram;
	}
	
	public ParserRule getSPDiagramRule() {
		return getSPDiagramAccess().getRule();
	}

	//DiagramElement:
	//	Container | Node;
	public DiagramElementElements getDiagramElementAccess() {
		return pDiagramElement;
	}
	
	public ParserRule getDiagramElementRule() {
		return getDiagramElementAccess().getRule();
	}

	//Container:
	//	creatable?="creatable"? recursive?="recursive"? containerType=ContainerType? "container" name=ID "for" eClass=STRING
	//	"accessibleThrough" expression=SPExpression style=ContainerStyleDefinition? ("{" elements+=DiagramElement+ "}")?;
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}

	//ContainerStyleDefinition:
	//	"[" color=ContainerColorDefinition ("," label=LabelStyleDefinition)? ("," border=BorderStyleDefinition)? "]";
	public ContainerStyleDefinitionElements getContainerStyleDefinitionAccess() {
		return pContainerStyleDefinition;
	}
	
	public ParserRule getContainerStyleDefinitionRule() {
		return getContainerStyleDefinitionAccess().getRule();
	}

	//ContainerType:
	//	"freeform" | "list";
	public ContainerTypeElements getContainerTypeAccess() {
		return pContainerType;
	}
	
	public ParserRule getContainerTypeRule() {
		return getContainerTypeAccess().getRule();
	}

	//ContainerColorDefinition:
	//	SolidColorDefinition | GradientColorDefinition;
	public ContainerColorDefinitionElements getContainerColorDefinitionAccess() {
		return pContainerColorDefinition;
	}
	
	public ParserRule getContainerColorDefinitionRule() {
		return getContainerColorDefinitionAccess().getRule();
	}

	//Node:
	//	creatable?="creatable"? "node" name=ID "for" eClass=STRING "accessibleThrough" expression=SPExpression
	//	style=NodeStyleDefinition?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//NodeStyleDefinition:
	//	"[" color=SolidColorDefinition ("," label=LabelStyleDefinition)? ("," border=BorderStyleDefinition)? "]";
	public NodeStyleDefinitionElements getNodeStyleDefinitionAccess() {
		return pNodeStyleDefinition;
	}
	
	public ParserRule getNodeStyleDefinitionRule() {
		return getNodeStyleDefinitionAccess().getRule();
	}

	//SolidColorDefinition:
	//	"color" color=Color;
	public SolidColorDefinitionElements getSolidColorDefinitionAccess() {
		return pSolidColorDefinition;
	}
	
	public ParserRule getSolidColorDefinitionRule() {
		return getSolidColorDefinitionAccess().getRule();
	}

	//GradientColorDefinition:
	//	"gradient from" from=Color "to" to=Color;
	public GradientColorDefinitionElements getGradientColorDefinitionAccess() {
		return pGradientColorDefinition;
	}
	
	public ParserRule getGradientColorDefinitionRule() {
		return getGradientColorDefinitionAccess().getRule();
	}

	//LabelStyleDefinition:
	//	"label" expression=SPExpression? color=SolidColorDefinition ("size" size=INT)? bold?="bold"? italic?="italic"?;
	public LabelStyleDefinitionElements getLabelStyleDefinitionAccess() {
		return pLabelStyleDefinition;
	}
	
	public ParserRule getLabelStyleDefinitionRule() {
		return getLabelStyleDefinitionAccess().getRule();
	}

	//BorderStyleDefinition:
	//	"border " color=SolidColorDefinition ("size" size=INT)?;
	public BorderStyleDefinitionElements getBorderStyleDefinitionAccess() {
		return pBorderStyleDefinition;
	}
	
	public ParserRule getBorderStyleDefinitionRule() {
		return getBorderStyleDefinitionAccess().getRule();
	}

	//SPExpression:
	//	AcceleoExpression | VarRef | FeatureRef;
	public SPExpressionElements getSPExpressionAccess() {
		return pSPExpression;
	}
	
	public ParserRule getSPExpressionRule() {
		return getSPExpressionAccess().getRule();
	}

	//AcceleoExpression:
	//	"acc:" value=STRING;
	public AcceleoExpressionElements getAcceleoExpressionAccess() {
		return pAcceleoExpression;
	}
	
	public ParserRule getAcceleoExpressionRule() {
		return getAcceleoExpressionAccess().getRule();
	}

	//VarRef:
	//	"var:" value=STRING;
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}

	//FeatureRef:
	//	"feature:" value=ID;
	public FeatureRefElements getFeatureRefAccess() {
		return pFeatureRef;
	}
	
	public ParserRule getFeatureRefRule() {
		return getFeatureRefAccess().getRule();
	}

	//MetamodelUsage:
	//	"metamodel" usage=[ecore::EPackage|STRING];
	public MetamodelUsageElements getMetamodelUsageAccess() {
		return pMetamodelUsage;
	}
	
	public ParserRule getMetamodelUsageRule() {
		return getMetamodelUsageAccess().getRule();
	}

	//Color:
	//	PreDefinedColorDefinition;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//PreDefinedColorDefinition:
	//	color=PreDefinedColor;
	public PreDefinedColorDefinitionElements getPreDefinedColorDefinitionAccess() {
		return pPreDefinedColorDefinition;
	}
	
	public ParserRule getPreDefinedColorDefinitionRule() {
		return getPreDefinedColorDefinitionAccess().getRule();
	}

	//enum PreDefinedColor:
	//	WHITE="white" | BLACK="black" | BLUE="blue" | LIGHT_BLUE="light blue" | DARK_BLUE="dark blue" | CHOCOLATE="chocolate"
	//	| LIGHT_CHOCOLATE="light chocolate" | DARK_CHOCOLATE="dark chocolate" | GRAY="gray" | LIGHT_GRAY="light gray" |
	//	DARK_GRAY="dark gray" | GREEN="green" | LIGHT_GREEN="light green" | DARK_GREEN="dark green" | ORANGE="orange" |
	//	LIGHT_ORANGE="light orange" | DARK_ORANGE="dark orange" | PURPLE="purple" | LIGHT_PURPLE="light purple" |
	//	DARK_PURPLE="dark purple" | RED="red" | LIGHT_RED="light red" | DARK_RED="dark red" | YELLOW="yellow" |
	//	LIGHT_YELLOW="light yellow" | DARK_YELLOW="dark yellow";
	public PreDefinedColorElements getPreDefinedColorAccess() {
		return unknownRulePreDefinedColor;
	}
	
	public EnumRule getPreDefinedColorRule() {
		return getPreDefinedColorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
