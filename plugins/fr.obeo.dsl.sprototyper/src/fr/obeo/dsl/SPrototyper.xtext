grammar fr.obeo.dsl.SPrototyper with org.eclipse.xtext.common.Terminals

generate sPrototyper "http://www.obeo.fr/dsl/SPrototyper"

SPrototyper:
	'proto' name=ID '{'
		('qualifier' qualifier=STRING)?
		viewpoints+=SPViewpoint*
	'}'
;

SPViewpoint:
	'viewpoint' name=ID  '{'
		('shortcut' shortcut=STRING)?
		('ext' extension=STRING)?
		representations+=SPRepresentation*	
	'}'
;

SPRepresentation:
	SPTable | SPDiagram
;

SPTable:
	'table' name=ID '{'
		('label' label=STRING)? 
		('title' title=STRING)? 
		metamodels+=MetamodelRef+
		'root' root=STRING
		elements+=TableElement+
		properties+=TableProperty+
	'}'
;

TableElement:
	(creatable ?= 'creatable')? (recursive ?= 'recursive')? 'element' eClass=STRING 'accessibleThrough' expression=SPExpression ('{'
		subElements +=TableElement+
	'}')?
;

TableProperty:
	'property' feature=STRING 
	('label' label=STRING)? 
	('expression' expression=SPExpression)?
;


SPDiagram:
	'diagram' name=ID '{'
		('label' label=STRING)? 
		('title' title=STRING)? 
		metamodels+=MetamodelRef+
		'root' root=STRING
		elements+=DiagramElement+	
	'}'
;

DiagramElement:
	Container
;


Container:
	(creatable ?= 'creatable')? (recursive ?= 'recursive')? (containerType=ContainerType)? 'container' eClass=STRING 'accessibleThrough' expression=SPExpression (style=ContainerStyleDefinition)? (
		'{'
			elements+=DiagramElement+
		'}'
	)?
;

ContainerStyleDefinition:
	'[' color=ContainerColorDefinition (',' label=LabelStyleDefinition)? (',' border=BorderStyleDefinition)? ']'
;


ContainerType:
	'freeform' | 'list'
;

SolidColorDefinition:
	'color' color=Color
;

ContainerColorDefinition:
	SolidColorDefinition | GradientColorDefinition
;

GradientColorDefinition:
	'gradient from' from=Color 'to' to=Color
;

LabelStyleDefinition:
	'label' (expression=SPExpression)? color=SolidColorDefinition ('size' size=INT)? (bold?='bold')? (italic?='italic')? 
;

BorderStyleDefinition:
	'border ' color=SolidColorDefinition ('size' size=INT)?
;

SPExpression:
	AcceleoExpression | VarRef | FeatureRef
;

AcceleoExpression:
	'acc:' value=STRING
;

VarRef:
	'var:' value=STRING
;

FeatureRef:
	'feature:' value=STRING
;

MetamodelRef:
	'use' metamodel=STRING
;

Color:
	PreDefinedColorDefinition
;

PreDefinedColorDefinition:
	color=PreDefinedColor
;

enum PreDefinedColor:
	WHITE='white' 
	| BLACK='black' 
	| BLUE='blue' | LIGHT_BLUE='light blue' | DARK_BLUE='dark blue'  
	| CHOCOLATE='chocolate' | LIGHT_CHOCOLATE='light chocolate' | DARK_CHOCOLATE='dark chocolate' 
	| GRAY='gray' | LIGHT_GRAY='light gray' | DARK_GRAY='dark gray'
	| GREEN='green' | LIGHT_GREEN='light green' | DARK_GREEN='dark green'
	| ORANGE='orange' | LIGHT_ORANGE='light orange' | DARK_ORANGE='dark orange'
	| PURPLE='purple' | LIGHT_PURPLE='light purple' | DARK_PURPLE='dark purple'
	| RED='red' | LIGHT_RED='light red' | DARK_RED='dark red'
	| YELLOW='yellow' | LIGHT_YELLOW='light yellow' | DARK_YELLOW='dark yellow'
;
